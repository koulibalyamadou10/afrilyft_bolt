import 'package:get/get.dart';
import 'package:geolocator/geolocator.dart';
import '../models/ride_model.dart';
import '../services/supabase_service.dart';
import '../services/realtime_service.dart';
import '../services/location_service.dart';
import '../theme/app_colors.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:flutter/material.dart';

class DriverController extends GetxController {
  final RxList<RideRequest> pendingRequests = <RideRequest>[].obs;
  final Rx<RideModel?> currentRide = Rx<RideModel?>(null);
  final RxBool isOnline = false.obs;
  final RxBool isAvailable = true.obs;
  final Rx<Position?> currentLocation = Rx<Position?>(null);

  @override
  void onInit() {
    super.onInit();
    _initializeDriver();
  }

  @override
  void onClose() {
    RealtimeService.cleanup();
    super.dispose();
  }

  Future<void> _initializeDriver() async {
    await _getCurrentLocation();
    await _loadPendingRequests();
    await _initializeRealtime();
  }

  Future<void> _getCurrentLocation() async {
    try {
      final position = await LocationService.getCurrentLocation();
      currentLocation.value = position;
    } catch (e) {
      Get.snackbar('Erreur', 'Impossible d\'obtenir votre position: $e');
    }
  }

  Future<void> _loadPendingRequests() async {
    try {
      final requests = await SupabaseService.getDriverRideRequests();
      pendingRequests.value =
          requests.map((json) => RideRequest.fromJson(json)).toList();
    } catch (e) {
      print('Erreur lors du chargement des demandes: $e');
    }
  }

  // M√©thode publique pour rafra√Æchir les demandes
  Future<void> refreshPendingRequests() async {
    print('üîÑ Rafra√Æchissement des demandes en attente...');
    await _loadPendingRequests();
    print(
      '‚úÖ Demandes rafra√Æchies: ${pendingRequests.length} demandes trouv√©es',
    );
  }

  Future<void> _initializeRealtime() async {
    try {
      await RealtimeService.initialize();
      print('‚úÖ Service temps r√©el initialis√© pour le chauffeur');
    } catch (e) {
      print('‚ùå Erreur lors de l\'initialisation du temps r√©el: $e');
    }
  }

  // NOUVELLE: Ajouter une demande en attente
  void addPendingRequest(RideRequest request) {
    // V√©rifier si la demande n'existe pas d√©j√†
    final existingIndex = pendingRequests.indexWhere(
      (req) => req.id == request.id,
    );
    if (existingIndex == -1) {
      pendingRequests.insert(0, request);
      print('‚úÖ Nouvelle demande ajout√©e: ${request.id}');
    } else {
      // Mettre √† jour la demande existante
      pendingRequests[existingIndex] = request;
      print('üîÑ Demande mise √† jour: ${request.id}');
    }
  }

  // NOUVELLE: Supprimer une demande
  void removePendingRequest(String requestId) {
    pendingRequests.removeWhere((req) => req.id == requestId);
    print('üóëÔ∏è Demande supprim√©e: $requestId');
  }

  void _viewRideRequest(String requestId) {
    // Navigation vers la page de d√©tail de la demande
    Get.toNamed('/ride-request-detail', arguments: requestId);
  }

  // Accepter une demande de trajet
  Future<void> acceptRideRequest(String requestId) async {
    try {
      final success = await RealtimeService.acceptRide(requestId);
      if (success) {
        // Supprimer la demande de la liste
        removePendingRequest(requestId);

        // Charger les d√©tails du trajet accept√©
        await _loadCurrentRide(requestId);

        Get.snackbar('Succ√®s', 'Trajet accept√© !');
        Get.toNamed('/ride-tracking');
      } else {
        Get.snackbar('Erreur', 'Impossible d\'accepter ce trajet');
      }
    } catch (e) {
      Get.snackbar('Erreur', 'Erreur lors de l\'acceptation: $e');
    }
  }

  // Refuser une demande de trajet
  Future<void> declineRideRequest(String requestId) async {
    try {
      await SupabaseService.declineRideRequest(requestId);
      removePendingRequest(requestId);
      Get.snackbar('Info', 'Demande refus√©e');
    } catch (e) {
      Get.snackbar('Erreur', 'Erreur lors du refus: $e');
    }
  }

  Future<void> _loadCurrentRide(String requestId) async {
    try {
      final rideData = await SupabaseService.getRideByRequestId(requestId);
      if (rideData != null) {
        currentRide.value = RideModel.fromJson(rideData);
      }
    } catch (e) {
      print('Erreur lors du chargement du trajet: $e');
    }
  }

  // Basculer le statut en ligne/hors ligne
  Future<void> toggleOnlineStatus() async {
    try {
      final newStatus = !isOnline.value;
      print(
        'üîÑ Tentative de changement de statut: ${newStatus ? "En ligne" : "Hors ligne"}',
      );

      // V√©rifier l'authentification
      final supabase = Supabase.instance.client;
      final user = supabase.auth.currentUser;
      if (user == null) {
        print('‚ùå Utilisateur non authentifi√©');
        Get.snackbar(
          'Erreur',
          'Vous devez √™tre connect√© pour changer votre statut',
          backgroundColor: AppColors.error,
          colorText: Colors.white,
        );
        return;
      }

      // Si on veut se mettre en ligne, v√©rifier la position d'abord
      if (newStatus) {
        print('üìç V√©rification de la position avant mise en ligne...');
        try {
          final position = await LocationService.getCurrentLocation();
          currentLocation.value = position;
          print(
            '‚úÖ Position actuelle r√©cup√©r√©e: ${position.latitude}, ${position.longitude}',
          );
        } catch (e) {
          print('‚ùå Erreur lors de la r√©cup√©ration de la position: $e');
          Get.snackbar(
            'Erreur de localisation',
            'Impossible d\'obtenir votre position. V√©rifiez vos permissions de localisation.',
            backgroundColor: AppColors.warning,
            colorText: Colors.white,
            duration: const Duration(seconds: 4),
          );
          return;
        }
      }

      // Mettre √† jour le statut local imm√©diatement pour l'UI
      isOnline.value = newStatus;
      print(
        'üîÑ Statut local mis √† jour: ${newStatus ? "En ligne" : "Hors ligne"}',
      );

      // G√©rer le suivi de position
      if (newStatus) {
        // Se mettre en ligne
        print('üìç D√©marrage du suivi de position...');
        try {
          await LocationService.startLocationTracking();
          print('‚úÖ Suivi de position d√©marr√©');
        } catch (e) {
          print('‚ùå Erreur lors du d√©marrage du suivi: $e');
          // Remettre hors ligne en cas d'erreur
          isOnline.value = false;
          Get.snackbar(
            'Erreur de suivi',
            'Impossible de d√©marrer le suivi de position: $e',
            backgroundColor: AppColors.error,
            colorText: Colors.white,
          );
          return;
        }
      } else {
        // Se mettre hors ligne
        print('üìç Arr√™t du suivi de position...');
        try {
          await LocationService.stopLocationTracking();
          print('‚úÖ Suivi de position arr√™t√©');

          // Vider la liste des demandes en attente quand on se met hors ligne
          pendingRequests.clear();
          print('üóëÔ∏è Demandes en attente supprim√©es (hors ligne)');
        } catch (e) {
          print('‚ùå Erreur lors de l\'arr√™t du suivi: $e');
          // Ne pas remettre en ligne car l'arr√™t peut √©chouer sans probl√®me majeur
        }
      }

      // Mettre √† jour le statut dans la base de donn√©es
      print('üìç Mise √† jour du statut en base de donn√©es...');
      try {
        await SupabaseService.updateDriverAvailability(newStatus);
        print('‚úÖ Statut mis √† jour en base de donn√©es');
      } catch (e) {
        print('‚ùå Erreur lors de la mise √† jour en base: $e');

        // En cas d'erreur de base de donn√©es, remettre le statut local
        isOnline.value = !newStatus;

        // Arr√™ter le suivi si on √©tait en train de se mettre en ligne
        if (newStatus) {
          try {
            await LocationService.stopLocationTracking();
          } catch (stopError) {
            print(
              '‚ùå Erreur lors de l\'arr√™t du suivi apr√®s erreur: $stopError',
            );
          }
        }

        Get.snackbar(
          'Erreur de connexion',
          'Impossible de mettre √† jour votre statut. V√©rifiez votre connexion internet.',
          backgroundColor: AppColors.error,
          colorText: Colors.white,
          duration: const Duration(seconds: 4),
        );
        return;
      }

      // Afficher le message de succ√®s avec plus de d√©tails
      if (newStatus) {
        Get.snackbar(
          'üü¢ En ligne',
          'Vous recevrez maintenant des demandes de trajet',
          duration: const Duration(seconds: 3),
          backgroundColor: AppColors.success,
          colorText: Colors.white,
          icon: const Icon(Icons.check_circle, color: Colors.white),
        );
      } else {
        Get.snackbar(
          'üî¥ Hors ligne',
          'Vous ne recevrez plus de demandes de trajet',
          duration: const Duration(seconds: 3),
          backgroundColor: AppColors.grey,
          colorText: Colors.white,
          icon: const Icon(Icons.cancel, color: Colors.white),
        );
      }

      print(
        '‚úÖ Changement de statut r√©ussi: ${newStatus ? "En ligne" : "Hors ligne"}',
      );
    } catch (e) {
      print('‚ùå Erreur g√©n√©rale lors du changement de statut: $e');

      // Remettre le statut local en cas d'erreur g√©n√©rale
      isOnline.value = false;

      Get.snackbar(
        'Erreur',
        'Impossible de changer le statut: $e',
        backgroundColor: AppColors.error,
        colorText: Colors.white,
        duration: const Duration(seconds: 4),
      );
    }
  }

  // M√©thode pour forcer la mise hors ligne (utile en cas de probl√®me)
  Future<void> forceOffline() async {
    try {
      print('üîÑ For√ßage de la mise hors ligne...');

      // Arr√™ter le suivi de position
      try {
        await LocationService.stopLocationTracking();
        print('‚úÖ Suivi de position arr√™t√©');
      } catch (e) {
        print('‚ö†Ô∏è Erreur lors de l\'arr√™t du suivi: $e');
      }

      // Vider les demandes
      pendingRequests.clear();

      // Mettre √† jour le statut local
      isOnline.value = false;

      // Mettre √† jour en base de donn√©es
      try {
        await SupabaseService.updateDriverAvailability(false);
        print('‚úÖ Statut mis √† jour en base de donn√©es');
      } catch (e) {
        print('‚ö†Ô∏è Erreur lors de la mise √† jour en base: $e');
      }

      Get.snackbar(
        'üî¥ Hors ligne forc√©',
        'Vous √™tes maintenant hors ligne',
        backgroundColor: AppColors.grey,
        colorText: Colors.white,
      );
    } catch (e) {
      print('‚ùå Erreur lors du for√ßage hors ligne: $e');
    }
  }

  // D√©marrer un trajet
  Future<void> startRide() async {
    if (currentRide.value != null) {
      try {
        await RealtimeService.updateRideStatus(
          currentRide.value!.id,
          'in_progress',
        );
        Get.snackbar('Trajet d√©marr√©', 'Le client a √©t√© notifi√©');
      } catch (e) {
        Get.snackbar('Erreur', 'Impossible de d√©marrer le trajet: $e');
      }
    }
  }

  // Terminer un trajet
  Future<void> completeRide() async {
    if (currentRide.value != null) {
      try {
        await RealtimeService.updateRideStatus(
          currentRide.value!.id,
          'completed',
        );
        currentRide.value = null;
        Get.snackbar('Trajet termin√©', 'Merci pour votre service !');
        Get.offAllNamed('/driver-home');
      } catch (e) {
        Get.snackbar('Erreur', 'Impossible de terminer le trajet: $e');
      }
    }
  }
}
